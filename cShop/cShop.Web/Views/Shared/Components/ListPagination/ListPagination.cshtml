@model ListPagination.PaginationModel
@inject IOptions<PaginationSetting> paginationSettingOption

@{
    var data = Model.Data;
    var type = Model.Type;
    var displayNameValuess = Model.DisplayNameValuess;
    var globalButtons = Model.GlobalButtons;
    var propertiesInfo = type.GetProperties();
    var namePropertyInfo = new Dictionary<string, PropertyInfo>();
    var columnsCount = Model.DisplayNameValuess.Count + 2;
    foreach (var (_, namePro) in displayNameValuess)
    {
        namePropertyInfo.Add(namePro, propertiesInfo.FirstOrDefault(p => p.Name == namePro));
    }

    var modifiedButtons = Model.ModifiedButtons;

    // Pagin
    var paginationSetting = paginationSettingOption.Value;
    var pageSize = paginationSetting.PageSize;
    var itemsCount = data.Count;
    var pageCount = (itemsCount + pageSize - 1) / pageSize;
}

<div class="table-responsive">
    <div class="d-none" id="pagination-settings" data-pagecount="@pageCount" data-pagesize="@pageSize" data-itemscount="@itemsCount" data-activepage="1"></div>

    <table id="zero_config" class="table table-striped table-bordered">
        <div class="w-100">
            <div class="float-left">


                @if (globalButtons != null && globalButtons.Count > 0)
                {
                    foreach (var item in globalButtons)
                    {
                        if (string.IsNullOrEmpty(item.Url))
                        {
                            <a class="@item.Classes" asp-action="@item.ActionName" asp-controller="@item.ControllerName">
                                @item.Text
                            </a>
                        }
                        else
                        {
                            <a class="@item.Classes" href="@item.Url">
                                @item.Text
                            </a>
                        }
                    }
                }

            </div>
            <div class="form-inline my-2 my-lg-0 mb-3 float-right" style="margin-bottom: 10px !important">
                <input class="form-control mr-sm-2" type="search" placeholder="Search" id="txt-search" aria-label="Search">
                <button class="btn btn-outline-success my-2 my-sm-0" id="btn-search" type="submit">Search</button>
            </div>
        </div>

        <thead>
            <tr>
                <th>STT</th>
                @foreach (var item in displayNameValuess)
                {
                    <th>@item.Key</th>
                }

                @if (modifiedButtons != null || modifiedButtons.Count > 0)
                {
                    <th>Modified</th>
                }
            </tr>
        </thead>
        <tbody>
            @foreach (var item in data)
            {
                <tr class="row-paginate-item">
                    <td class="row-paginate-item-stt text-center"></td>
                    @foreach (var (_, nameProperty) in displayNameValuess)
                    {
                        <td>@(namePropertyInfo[nameProperty].GetValue(item))</td>
                    }
                    @if (modifiedButtons != null || modifiedButtons.Count > 0)
                    {
                        <td>
                            @foreach (var button in modifiedButtons)
                            {
                                if (!string.IsNullOrEmpty(button.Url))
                                {
                                    <a href="@button.Url" data-id="@type.GetProperty("Id").GetValue(item)" class="@button.Classes">@button.Text</a>
                                }
                                else
                                {
                                    var routeData = @button.RouteDatas.ToDictionary(
                                        kv => kv.Key,
                                        kv => !string.IsNullOrEmpty(kv.Value.PropertyName) ?
                                            type.GetProperty(kv.Value.PropertyName).GetValue(item).ToString()
                                            : kv.Value.Value);

                                    <a class="@button.Classes" data-id="@type.GetProperty("Id").GetValue(item)" asp-controller="@button.ControllerName" asp-action="@button.ActionName" asp-all-route-data="@routeData">@button.Text</a>
                                }

                            }
                        </td>
                    }
                </tr>
            }

            <tr id="img-empty-list">
                <td colspan="@columnsCount">
                    <div class="w-100  text-center">
                        <img src="~/images/empty-list.png" class="img-fluid mx-auto" alt="Responsive image">
                    </div>
                </td>
            </tr>
        </tbody>

    </table>

    @if (pageCount > 0)
    {
        <nav aria-label="Page navigation example">
            <ul class="pagination">
                <li class="page-item pagination-item-previous">
                    <a class="page-link" href="#" aria-label="Previous">
                        <span aria-hidden="true">&laquo;</span>
                    </a>
                </li>
                <li class="page-item active pagination-item-number"><a class="page-link" href="#">1</a></li>

                @for (int i = 2; i <= pageCount; i++)
                {
                    <li class="page-item pagination-item-number"><a class="page-link" href="#">@i</a></li>
                }

                <li class="page-item pagination-item-next">
                    <a class="page-link" href="#" aria-label="Next">
                        <span aria-hidden="true">&raquo;</span>
                    </a>
                </li>
            </ul>
        </nav>
    }

</div>